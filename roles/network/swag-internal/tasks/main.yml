---
- name: Get a list of containers
  delegate_to: localhost
  become: no
  find:
    paths: 
      - "roles/containers/services"
      - "roles/containers/media"
      - "roles/containers/homeautomation"
      - "roles/containers/system"
    file_type: directory
    excludes: "homer"
    recurse: no
  register: containers

- name: Include all default.yml files
  include_vars:
    dir: "{{ playbook_dir }}/{{ item.path }}/defaults"
    files_matching: main.yml
    name: "{{ item.path.split('/')[-1] }}"
  with_items: "{{ containers.files }}"
  no_log: true

- name: Install python3-passlib
  package:
    name: python3-passlib
    state: latest
  when: swag_htpasswd_user is defined and swag_htpasswd_password is defined

- name: Populate the .htpasswd file
  htpasswd:
    path: "{{ docker_dir }}/{{ container_name }}/config/nginx/.htpasswd"
    name: "{{ swag_htpasswd_user }}"
    password: "{{ swag_htpasswd_password }}"
    owner: root
    mode: 0640
  when: swag_htpasswd_user is defined and swag_htpasswd_password is defined

- name: Populate the dictionary of all containers
  set_fact:
    swag_urls: "{{ swag_urls | default({}) | combine({ item.path.split('/')[-1] : lookup('vars', item.path.split('/')[-1])['dashboard_url'] | default('') | regex_replace('https?://|/*', '') }) }}"
  when: lookup('vars', 'enable_' + item.path.split('/')[-1]) | default(False)
  with_items: "{{ containers.files }}"

- name: Install the {{ container_name }} config files
  template:
    src: "{{ item }}"
    dest: "{{ docker_dir }}/{{ container_name }}/config/nginx/proxy-confs/{{ item | basename | regex_replace('.j2$', '') }}"
  when: lookup('vars', 'enable_' + (item | basename).split('.')[0]) | default(False)
  with_fileglob:
    - templates/*.j2
  register: swag_config

- name: Create a list of variables files that were deployed
  set_fact:
    installed_templates: "{{installed_templates | default([]) + [ item.dest ]}}" 
  with_items: "{{ swag_config.results }}"
  when: item.skipped is not defined

- name: List all config files in the target folder
  find:
    path: 
      - "{{ docker_dir }}/{{ container_name }}/config/nginx/proxy-confs/"
    patterns:
      - ".*\\.conf(?!\\.sample)"
    use_regex: yes
  register: found_files

- name: Remove config files for disabled services
  file: 
    path: "{{ item.path }}"
    state: absent
  when: item.path not in installed_templates
  with_items: "{{ found_files['files'] }}"
  register: removed_swag_config

- name: Install the DNS config file
  template:
    src: "dns-conf/cloudflare.ini.j2"
    dest: "{{ docker_dir }}/{{ container_name }}/config/dns-conf/cloudflare.ini"


- name: Create a macvlan network (Ansible's docker_network can't do macvlan)
  shell:
    cmd: "docker network create -d macvlan \
             --subnet={{ lan_network }} \
             --gateway={{ ansible_default_ipv4.gateway }} \
             -o parent=enp2s0 swag_macvlan"
  ignore_errors: yes

- name: Make sure the {{ container_name }} container is created and running
  docker_container:
    name: "{{ container_name }}"
    image: "ghcr.io/linuxserver/swag"
    pull: yes
    networks:
      - name: swag_macvlan
      - name: swag_internal_network
    capabilities: 
      - net_admin
    state: 'started'
    env:
      "PUID": "{{ guid }}"
      "PGID": "{{ guid }}"
      "TZ": "{{ timezone }}"
      "URL": "{{ host_local }}"
      "SUBDOMAINS": "wildcard"
      "VALIDATION": "dns"
      "DNSPLUGIN": "cloudflare"
      "EMAIL": "{{ email }}"
    volumes:
      - "{{ docker_dir }}/{{ container_name }}/config:/config"
    restart_policy: unless-stopped

- name: Test Nginx configuration
  shell: docker exec -it swag /usr/sbin/nginx -c /config/nginx/nginx.conf -t
  register: swag_nginx_test
  changed_when: swag_nginx_test is not search("test is successful")
  failed_when: swag_nginx_test is not search("test is successful")

- name: Restart {{ container_name }} on changes
  docker_container:
    name: "{{ container_name }}"
    state: started
    restart: yes
  when:
    swag_config.changed or removed_swag_config.changed
